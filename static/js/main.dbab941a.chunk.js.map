{"version":3,"sources":["components/QrApp.js","index.js"],"names":["QrApp","updateQR","e","setState","textBox","target","value","console","log","state","readQR","generateQR","qrText","a","navigator","clipboard","read","clipboardItems","clipboardItem","types","type","alert","canvas","document","createElement","ctx","getContext","getType","blob","img","Image","src","URL","createObjectURL","onload","width","height","drawImage","imageData","getImageData","code","jsQR","data","error","name","message","id","TextField","label","multiline","rows","defaultValue","this","variant","onChange","Button","color","onClick","React","Component","ReactDOM","render","getElementById"],"mappings":"yVAqGeA,G,wDA7FX,aAAe,IAAD,8BACV,gBAQJC,SAAW,SAACC,GACR,EAAKC,SAAS,CAACC,QAASF,EAAEG,OAAOC,QACjCC,QAAQC,IAAI,EAAKC,MAAMC,SAXb,EAcdC,WAAa,WACT,EAAKR,SAAS,CAACS,OAAQ,EAAKH,MAAML,WAfxB,EAiBdM,OAjBc,sBAiBL,wCAAAG,EAAA,+EAE4BC,UAAUC,UAAUC,OAFhD,OAEKC,EAFL,qBAG2BA,GAH3B,yDAGUC,EAHV,sBAIsBA,EAAcC,OAJpC,8DAKoB,eADNC,EAJd,0BAMWC,MAAM,2DANjB,iDAAAR,EAAA,wCAAAA,EAAA,6DAQeS,EAASC,SAASC,cAAc,UAC9BC,EAAMH,EAAOI,WAAW,MATzC,SAU8BR,EAAcS,QAAQP,GAVpD,OAUiBQ,EAVjB,QAWeC,EAAM,IAAIC,OACVC,IAAMC,IAAIC,gBAAgBL,GAC9BC,EAAIK,OAAS,WACTZ,EAAOa,MAAQN,EAAIM,MACnBb,EAAOc,OAASP,EAAIO,OACpBX,EAAIY,UAAUR,EAAK,EAAG,GACtB,IAAIS,EAAYb,EAAIc,aAAa,EAAE,EAAEV,EAAIM,MAAON,EAAIO,QAC9CI,EAAOC,IAAKH,EAAUI,KAAMJ,EAAUH,MAAOG,EAAUF,QACzDI,GACA,EAAKrC,SAAS,CAACO,OAAQ8B,EAAKE,QApB/C,+XA6BDnC,QAAQoC,MAAM,KAAIC,KAAM,KAAIC,SA7B3B,qFAfL,EAAKpC,MAAQ,CACTG,OAAQ,aACRR,QAAS,aACTM,OAAQ,kBALF,E,qDAmDV,OACI,yBAAKoC,GAAG,aACJ,yBAAKA,GAAG,gBACJ,4CAGA,kBAACC,EAAA,EAAD,CACID,GAAG,UACHE,MAAM,UACNC,WAAS,EACTC,KAAM,EACNC,aAAcC,KAAK3C,MAAMG,OACzByC,QAAQ,WACRC,SAAUF,KAAKnD,WAEnB,yBAAK6C,GAAG,mBACJ,kBAACS,EAAA,EAAD,CAAQF,QAAQ,YAAYG,MAAM,UAAUC,QAASL,KAAKzC,YAA1D,kBAGJ,yBAAKmC,GAAG,WACJ,kBAAC,IAAD,CAAQxC,MAAO8C,KAAK3C,MAAMG,WAIlC,yBAAKkC,GAAG,aACJ,yCAGA,yBAAKA,GAAG,eACJ,kBAACS,EAAA,EAAD,CAAQF,QAAQ,YAAYG,MAAM,UAAUC,QAASL,KAAK1C,QAA1D,6BAEJ,2BACK0C,KAAK3C,MAAMC,c,GApFhBgD,IAAMC,YCF1BC,IAASC,OAAO,kBAAC,EAAD,MAAWtC,SAASuC,eAAe,W","file":"static/js/main.dbab941a.chunk.js","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport QRCode from 'qrcode.react'\nimport jsQR from \"jsqr\";\nimport './QrApp.css';\n\nclass QrApp extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            qrText: 'Enter Text',\n            textBox: 'Enter Text',\n            readQR: 'Converted Text'\n        };\n    }\n\n    updateQR = (e) => {\n        this.setState({textBox: e.target.value});\n        console.log(this.state.readQR);\n    };\n\n    generateQR = () => {\n        this.setState({qrText: this.state.textBox});\n    };\n    readQR = async () => {\n        try {\n            const clipboardItems = await navigator.clipboard.read();\n            for (const clipboardItem of clipboardItems) {\n                for (const type of clipboardItem.types) {\n                    if (type !== 'image/png') {\n                        alert(\"Clipboard contains non-image data. Unable to access it.\");\n                    } else {\n                        let canvas = document.createElement('canvas');\n                        const ctx = canvas.getContext(\"2d\");\n                        const blob = await clipboardItem.getType(type);\n                        let img = new Image();\n                        img.src = URL.createObjectURL(blob);\n                        img.onload = () => {\n                            canvas.width = img.width;\n                            canvas.height = img.height;\n                            ctx.drawImage(img, 0, 0);\n                            let imageData = ctx.getImageData(0,0,img.width, img.height);\n                            const code = jsQR(imageData.data, imageData.width, imageData.height);\n                            if (code) {\n                                this.setState({readQR: code.data});\n                            }\n                        }\n\n                    }\n\n                }\n            }\n        } catch (err) {\n            console.error(err.name, err.message);\n        }\n    };\n\n    render() {\n        return (\n            <div id='main-area'>\n                <div id='qr-generator'>\n                    <h1>\n                        QR Generator\n                    </h1>\n                    <TextField\n                        id=\"qr-text\"\n                        label=\"Qr Text\"\n                        multiline\n                        rows={4}\n                        defaultValue={this.state.qrText}\n                        variant=\"outlined\"\n                        onChange={this.updateQR}\n                    />\n                    <div id='generate-button'>\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.generateQR}> Generate QR </Button>\n                    </div>\n\n                    <div id='qr-code'>\n                        <QRCode value={this.state.qrText} />\n                    </div>\n                </div>\n\n                <div id='qr-reader'>\n                    <h1>\n                        QR Reader\n                    </h1>\n                    <div id='read-button'>\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.readQR}> Read QR From Clipboard </Button>\n                    </div>\n                    <p>\n                        {this.state.readQR}\n                    </p>\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nexport default QrApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport QrApp from \"./components/QrApp\";\n\nReactDOM.render(<QrApp />, document.getElementById('root'));\n"],"sourceRoot":""}